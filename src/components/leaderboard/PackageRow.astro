---
import type { PackageEntry } from "@/types/packageEntry";

type Props = {
  entry: PackageEntry;
  index: number;
};

const { entry, index } = Astro.props;
---

<li class="relative">
  {
    index !== 10 && (
      <div class="absolute -bottom-2 border-b border-white/15 w-[2200px] -ml-[20%]" />
    )
  }
  <a
    href="/"
    class="p-2 relative flex justify-between items-center font-mono hover:bg-white/5 rounded-3xl ring-accent-bluemedium focus:outline-none transition-all focus-visible:ring-4 ring-offset-4 ring-offset-bkg"
    data-row
  >
    <div class="flex gap-8 items-center">
      <p
        class="text-white/50 text-5xl px-8 py-6 bg-white/5 max-w-fit rounded-2xl leading-none"
      >
        {index.toString().padStart(2, "0")}
      </p>
      <p class="text-5xl uppercase tracking-widest" id={`entry-${index}`}>
        {entry.name}
      </p>
    </div>
    <p class="text-5xl uppercase tracking-widest" id={`downloads-${index}`}>
      {entry.downloads.toString().padStart(3, "0")}
    </p>
  </a>
</li>

<script>
  // add incrementer/randomizer for initial data load
  // add new state once data is loaded
  // keyboard shortcuts
  const rows = [
    ...document.querySelectorAll("[data-row]"),
  ] as HTMLAnchorElement[];

  rows.forEach((row, idx) => {
    row.addEventListener("keydown", (e) => {
      if (
        e.key === "ArrowUp" ||
        e.key === "ArrowDown" ||
        e.key === "Home" ||
        e.key === "End"
      ) {
        e.preventDefault();
      }
      switch (e.key) {
        case "ArrowUp":
          idx > 0 ? rows[idx - 1].focus() : rows[rows.length - 1].focus();
          break;
        case "ArrowDown":
          idx < rows.length - 1 ? rows[idx + 1].focus() : rows[0].focus();
          break;
        case "Home":
          rows[0].focus();
          break;
        case "End":
          rows[rows.length - 1].focus();
          break;
        default:
          break;
      }
    });
  });
</script>
