---
import "@fontsource-variable/dm-sans";
import "@fontsource/dm-mono";
import Lines from "@/components/ui/Lines.astro";
import BaseHead from "@/layouts/BaseHead.astro";
import { baseData } from "@/data/siteData";
import Heading from "@/components/ui/Heading.astro";
import { Icon } from "astro-icon/components";
import Button from "@/components/ui/Button.astro";
import ProfileGrid from "@/components/personality/ProfileGrid.astro";
import { generatePersonality } from "@/lib/generatePersonality";
import type { Brews } from "@/types/brews";
import LoadingState from "@/components/personality/LoadingState.astro";

const { id } = Astro.params;
const res = await fetch(`${Astro.url.origin}/api/getBrewfiles.json?id=${id}`);

if (!res.ok) return Astro.redirect("/");
const brews: Brews = await res.json();

let entry = brews.brews[0];

if (!entry) return Astro.redirect("/");
---

<html lang="en">
  <BaseHead title={baseData.title} description={baseData.description} />
  <body class="bg-bkg text-white leading-[1.35]">
    <div class="max-w-[2200px] mx-auto relative min-h-screen overflow-hidden">
      <Lines />
      <div class="place-content-center min-h-screen">
        <main class="grid gap-2 place-items-center py-4">
          <Heading
            tagType="h1"
            size="md"
            classes="flex items-center gap-2 text-center"
            >Screenshot and Share <Icon name="twitter" /></Heading
          >
          <div class="p-2 relative">
            <div
              id="spinner-container"
              class="z-10 inset-0 absolute grid h-[80vh] place-items-center"
            >
              <LoadingState />
            </div>
            <div
              id="profile-container"
              class="opacity-0 transition-all duration-1000 translate-y-8"
              data-lastGenerated={entry.personalitySummary?.last_generated}
            >
              <ProfileGrid entry={entry} />
            </div>
          </div>
          <Button
            variant="default"
            size="large"
            id="copy-btn"
            classes="backdrop-blur-3xl"
            ><span id="copy-link">Copy Link</span>
            <Icon name="copy" size={32} aria-hidden="true" />
          </Button>
        </main>
      </div>
    </div>

    <script>
      import { generatePersonality } from "@/lib/generatePersonality";
      import type { Brews } from "@/types/brews";
      const id = window.location.pathname.split("/")[2];
      const updatePersonality = async () => {
        const res = await fetch(`/api/getBrewfiles.json?id=${id}`);
        if (!res.ok) return Astro.redirect("/");
        const brews: Brews = await res.json();
        const entry = brews.brews[0];
        generatePersonality(entry.data, entry.id);
      };

      const last_generated = document.querySelector(
        "[data-lastgenerated]"
      ) as HTMLDivElement;

      if (last_generated) {
        if (
          Date.now() -
            parseInt(last_generated.dataset.lastgenerated as string) >
          60000
        ) {
          updatePersonality();
        }
      }
    </script>

    <script define:vars={{ id, site: Astro.url.origin }}>
      const spinnerContainer = document.getElementById("spinner-container");
      const profileContainer = document.getElementById("profile-container");
      const copyBtn = document.getElementById("copy-btn");
      const copyLink = document.getElementById("copy-link");
      let copyTimeout;

      const resetCopyText = () => {
        copyTimeout = setTimeout(() => {
          copyLink.textContent = "Copy Link";
        }, 2000);
      };

      window.addEventListener("DOMContentLoaded", () => {
        setTimeout(() => {
          spinnerContainer?.remove();
          profileContainer?.classList.remove("opacity-0");
          profileContainer?.classList.remove("translate-y-8");
        }, 800);
      });

      copyBtn?.addEventListener("click", () => {
        const url = `${site}/brew/${id}/`;
        clearTimeout(copyTimeout);
        navigator.clipboard
          .writeText(url)
          .then(() => {
            copyLink.textContent = "Copied!";
            resetCopyText();
          })
          .catch((err) => {
            copyLink.textContent = "Failed to copy";
            resetCopyText();
            console.error("Failed to copy: ", err);
          });
      });
    </script>

    <style>
      * {
        scrollbar-gutter: stable;
      }
      @media (prefers-reduced-motion: reduce) {
        html:focus-within {
          scroll-behavior: auto;
        }

        *,
        *::before,
        *::after {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
          scroll-behavior: auto !important;
        }
      }
    </style>
  </body>
</html>
